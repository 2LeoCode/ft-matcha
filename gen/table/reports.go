//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Reports = newReportsTable("", "reports", "")

type reportsTable struct {
	sqlite.Table

	// Columns
	Reason                  sqlite.ColumnString
	Status                  sqlite.ColumnString
	CreationTime            sqlite.ColumnInteger
	AssignedAdministratorID sqlite.ColumnInteger
	IssuerID                sqlite.ColumnInteger
	TargetID                sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ReportsTable struct {
	reportsTable

	EXCLUDED reportsTable
}

// AS creates new ReportsTable with assigned alias
func (a ReportsTable) AS(alias string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReportsTable with assigned schema name
func (a ReportsTable) FromSchema(schemaName string) *ReportsTable {
	return newReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReportsTable with assigned table prefix
func (a ReportsTable) WithPrefix(prefix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReportsTable with assigned table suffix
func (a ReportsTable) WithSuffix(suffix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReportsTable(schemaName, tableName, alias string) *ReportsTable {
	return &ReportsTable{
		reportsTable: newReportsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newReportsTableImpl("", "excluded", ""),
	}
}

func newReportsTableImpl(schemaName, tableName, alias string) reportsTable {
	var (
		ReasonColumn                  = sqlite.StringColumn("reason")
		StatusColumn                  = sqlite.StringColumn("status")
		CreationTimeColumn            = sqlite.IntegerColumn("creation_time")
		AssignedAdministratorIDColumn = sqlite.IntegerColumn("assigned_administrator_id")
		IssuerIDColumn                = sqlite.IntegerColumn("issuer_id")
		TargetIDColumn                = sqlite.IntegerColumn("target_id")
		allColumns                    = sqlite.ColumnList{ReasonColumn, StatusColumn, CreationTimeColumn, AssignedAdministratorIDColumn, IssuerIDColumn, TargetIDColumn}
		mutableColumns                = sqlite.ColumnList{ReasonColumn, StatusColumn, CreationTimeColumn, AssignedAdministratorIDColumn, IssuerIDColumn, TargetIDColumn}
	)

	return reportsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Reason:                  ReasonColumn,
		Status:                  StatusColumn,
		CreationTime:            CreationTimeColumn,
		AssignedAdministratorID: AssignedAdministratorIDColumn,
		IssuerID:                IssuerIDColumn,
		TargetID:                TargetIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
