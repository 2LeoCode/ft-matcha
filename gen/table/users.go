//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Users = newUsersTable("", "users", "")

type usersTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	Mail        sqlite.ColumnString
	Password    sqlite.ColumnString
	FirstName   sqlite.ColumnString
	LastName    sqlite.ColumnString
	BirthDate   sqlite.ColumnInteger
	Sex         sqlite.ColumnInteger
	Orientation sqlite.ColumnInteger
	Country     sqlite.ColumnString
	City        sqlite.ColumnString
	Bio         sqlite.ColumnString
	FamePoints  sqlite.ColumnInteger
	Suspended   sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		MailColumn        = sqlite.StringColumn("mail")
		PasswordColumn    = sqlite.StringColumn("password")
		FirstNameColumn   = sqlite.StringColumn("first_name")
		LastNameColumn    = sqlite.StringColumn("last_name")
		BirthDateColumn   = sqlite.IntegerColumn("birth_date")
		SexColumn         = sqlite.IntegerColumn("sex")
		OrientationColumn = sqlite.IntegerColumn("orientation")
		CountryColumn     = sqlite.StringColumn("country")
		CityColumn        = sqlite.StringColumn("city")
		BioColumn         = sqlite.StringColumn("bio")
		FamePointsColumn  = sqlite.IntegerColumn("fame_points")
		SuspendedColumn   = sqlite.IntegerColumn("suspended")
		allColumns        = sqlite.ColumnList{IDColumn, MailColumn, PasswordColumn, FirstNameColumn, LastNameColumn, BirthDateColumn, SexColumn, OrientationColumn, CountryColumn, CityColumn, BioColumn, FamePointsColumn, SuspendedColumn}
		mutableColumns    = sqlite.ColumnList{MailColumn, PasswordColumn, FirstNameColumn, LastNameColumn, BirthDateColumn, SexColumn, OrientationColumn, CountryColumn, CityColumn, BioColumn, FamePointsColumn, SuspendedColumn}
	)

	return usersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Mail:        MailColumn,
		Password:    PasswordColumn,
		FirstName:   FirstNameColumn,
		LastName:    LastNameColumn,
		BirthDate:   BirthDateColumn,
		Sex:         SexColumn,
		Orientation: OrientationColumn,
		Country:     CountryColumn,
		City:        CityColumn,
		Bio:         BioColumn,
		FamePoints:  FamePointsColumn,
		Suspended:   SuspendedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
