//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Positions = newPositionsTable("", "positions", "")

type positionsTable struct {
	sqlite.Table

	// Columns
	UserID    sqlite.ColumnInteger
	Latitude  sqlite.ColumnInteger
	Longitude sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type PositionsTable struct {
	positionsTable

	EXCLUDED positionsTable
}

// AS creates new PositionsTable with assigned alias
func (a PositionsTable) AS(alias string) *PositionsTable {
	return newPositionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PositionsTable with assigned schema name
func (a PositionsTable) FromSchema(schemaName string) *PositionsTable {
	return newPositionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PositionsTable with assigned table prefix
func (a PositionsTable) WithPrefix(prefix string) *PositionsTable {
	return newPositionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PositionsTable with assigned table suffix
func (a PositionsTable) WithSuffix(suffix string) *PositionsTable {
	return newPositionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPositionsTable(schemaName, tableName, alias string) *PositionsTable {
	return &PositionsTable{
		positionsTable: newPositionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newPositionsTableImpl("", "excluded", ""),
	}
}

func newPositionsTableImpl(schemaName, tableName, alias string) positionsTable {
	var (
		UserIDColumn    = sqlite.IntegerColumn("user_id")
		LatitudeColumn  = sqlite.IntegerColumn("latitude")
		LongitudeColumn = sqlite.IntegerColumn("longitude")
		allColumns      = sqlite.ColumnList{UserIDColumn, LatitudeColumn, LongitudeColumn}
		mutableColumns  = sqlite.ColumnList{UserIDColumn, LatitudeColumn, LongitudeColumn}
	)

	return positionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		Latitude:  LatitudeColumn,
		Longitude: LongitudeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
