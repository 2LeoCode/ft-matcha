//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Interactions = newInteractionsTable("", "interactions", "")

type interactionsTable struct {
	sqlite.Table

	// Columns
	Kind         sqlite.ColumnString
	CreationTime sqlite.ColumnInteger
	GiverID      sqlite.ColumnInteger
	GivenID      sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type InteractionsTable struct {
	interactionsTable

	EXCLUDED interactionsTable
}

// AS creates new InteractionsTable with assigned alias
func (a InteractionsTable) AS(alias string) *InteractionsTable {
	return newInteractionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InteractionsTable with assigned schema name
func (a InteractionsTable) FromSchema(schemaName string) *InteractionsTable {
	return newInteractionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InteractionsTable with assigned table prefix
func (a InteractionsTable) WithPrefix(prefix string) *InteractionsTable {
	return newInteractionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InteractionsTable with assigned table suffix
func (a InteractionsTable) WithSuffix(suffix string) *InteractionsTable {
	return newInteractionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInteractionsTable(schemaName, tableName, alias string) *InteractionsTable {
	return &InteractionsTable{
		interactionsTable: newInteractionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newInteractionsTableImpl("", "excluded", ""),
	}
}

func newInteractionsTableImpl(schemaName, tableName, alias string) interactionsTable {
	var (
		KindColumn         = sqlite.StringColumn("kind")
		CreationTimeColumn = sqlite.IntegerColumn("creation_time")
		GiverIDColumn      = sqlite.IntegerColumn("giver_id")
		GivenIDColumn      = sqlite.IntegerColumn("given_id")
		allColumns         = sqlite.ColumnList{KindColumn, CreationTimeColumn, GiverIDColumn, GivenIDColumn}
		mutableColumns     = sqlite.ColumnList{KindColumn, CreationTimeColumn, GiverIDColumn, GivenIDColumn}
	)

	return interactionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Kind:         KindColumn,
		CreationTime: CreationTimeColumn,
		GiverID:      GiverIDColumn,
		GivenID:      GivenIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
