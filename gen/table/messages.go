//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Messages = newMessagesTable("", "messages", "")

type messagesTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	CreationTime sqlite.ColumnInteger
	Content      sqlite.ColumnString
	AuthorID     sqlite.ColumnInteger
	DiscussionID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MessagesTable struct {
	messagesTable

	EXCLUDED messagesTable
}

// AS creates new MessagesTable with assigned alias
func (a MessagesTable) AS(alias string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessagesTable with assigned schema name
func (a MessagesTable) FromSchema(schemaName string) *MessagesTable {
	return newMessagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessagesTable with assigned table prefix
func (a MessagesTable) WithPrefix(prefix string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessagesTable with assigned table suffix
func (a MessagesTable) WithSuffix(suffix string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessagesTable(schemaName, tableName, alias string) *MessagesTable {
	return &MessagesTable{
		messagesTable: newMessagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newMessagesTableImpl("", "excluded", ""),
	}
}

func newMessagesTableImpl(schemaName, tableName, alias string) messagesTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		CreationTimeColumn = sqlite.IntegerColumn("creation_time")
		ContentColumn      = sqlite.StringColumn("content")
		AuthorIDColumn     = sqlite.IntegerColumn("author_id")
		DiscussionIDColumn = sqlite.IntegerColumn("discussion_id")
		allColumns         = sqlite.ColumnList{IDColumn, CreationTimeColumn, ContentColumn, AuthorIDColumn, DiscussionIDColumn}
		mutableColumns     = sqlite.ColumnList{CreationTimeColumn, ContentColumn, AuthorIDColumn, DiscussionIDColumn}
	)

	return messagesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreationTime: CreationTimeColumn,
		Content:      ContentColumn,
		AuthorID:     AuthorIDColumn,
		DiscussionID: DiscussionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
