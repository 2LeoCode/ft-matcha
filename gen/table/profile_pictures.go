//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ProfilePictures = newProfilePicturesTable("", "profile_pictures", "")

type profilePicturesTable struct {
	sqlite.Table

	// Columns
	ID       sqlite.ColumnInteger
	UserID   sqlite.ColumnInteger
	FileName sqlite.ColumnString
	Data     sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ProfilePicturesTable struct {
	profilePicturesTable

	EXCLUDED profilePicturesTable
}

// AS creates new ProfilePicturesTable with assigned alias
func (a ProfilePicturesTable) AS(alias string) *ProfilePicturesTable {
	return newProfilePicturesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProfilePicturesTable with assigned schema name
func (a ProfilePicturesTable) FromSchema(schemaName string) *ProfilePicturesTable {
	return newProfilePicturesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProfilePicturesTable with assigned table prefix
func (a ProfilePicturesTable) WithPrefix(prefix string) *ProfilePicturesTable {
	return newProfilePicturesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProfilePicturesTable with assigned table suffix
func (a ProfilePicturesTable) WithSuffix(suffix string) *ProfilePicturesTable {
	return newProfilePicturesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProfilePicturesTable(schemaName, tableName, alias string) *ProfilePicturesTable {
	return &ProfilePicturesTable{
		profilePicturesTable: newProfilePicturesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newProfilePicturesTableImpl("", "excluded", ""),
	}
}

func newProfilePicturesTableImpl(schemaName, tableName, alias string) profilePicturesTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		UserIDColumn   = sqlite.IntegerColumn("user_id")
		FileNameColumn = sqlite.StringColumn("file_name")
		DataColumn     = sqlite.StringColumn("data")
		allColumns     = sqlite.ColumnList{IDColumn, UserIDColumn, FileNameColumn, DataColumn}
		mutableColumns = sqlite.ColumnList{UserIDColumn, FileNameColumn, DataColumn}
	)

	return profilePicturesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		UserID:   UserIDColumn,
		FileName: FileNameColumn,
		Data:     DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
