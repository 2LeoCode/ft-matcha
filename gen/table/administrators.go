//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Administrators = newAdministratorsTable("", "administrators", "")

type administratorsTable struct {
	sqlite.Table

	// Columns
	ID       sqlite.ColumnInteger
	Username sqlite.ColumnString
	Password sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AdministratorsTable struct {
	administratorsTable

	EXCLUDED administratorsTable
}

// AS creates new AdministratorsTable with assigned alias
func (a AdministratorsTable) AS(alias string) *AdministratorsTable {
	return newAdministratorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdministratorsTable with assigned schema name
func (a AdministratorsTable) FromSchema(schemaName string) *AdministratorsTable {
	return newAdministratorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdministratorsTable with assigned table prefix
func (a AdministratorsTable) WithPrefix(prefix string) *AdministratorsTable {
	return newAdministratorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdministratorsTable with assigned table suffix
func (a AdministratorsTable) WithSuffix(suffix string) *AdministratorsTable {
	return newAdministratorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdministratorsTable(schemaName, tableName, alias string) *AdministratorsTable {
	return &AdministratorsTable{
		administratorsTable: newAdministratorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newAdministratorsTableImpl("", "excluded", ""),
	}
}

func newAdministratorsTableImpl(schemaName, tableName, alias string) administratorsTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		UsernameColumn = sqlite.StringColumn("username")
		PasswordColumn = sqlite.StringColumn("password")
		allColumns     = sqlite.ColumnList{IDColumn, UsernameColumn, PasswordColumn}
		mutableColumns = sqlite.ColumnList{UsernameColumn, PasswordColumn}
	)

	return administratorsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Username: UsernameColumn,
		Password: PasswordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
